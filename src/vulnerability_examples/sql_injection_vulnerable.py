# Vulnerable Python Example - SQL Injection
import sqlite3

def get_user_data_vulnerable(username):
    conn = sqlite3.connect('example.db')
    cursor = conn.cursor()
    # DANGEROUS: Direct string concatenation for SQL query
    query = f"SELECT * FROM users WHERE username = '{username}'"
    print(f"Executing query: {query}")
    cursor.execute(query)
    result = cursor.fetchall()
    conn.close()
    return result

# Secure Python Example - Parameterized Query
def get_user_data_secure(username):
    conn = sqlite3.connect('example.db')
    cursor = conn.cursor()
    # SECURE: Using parameterized queries
    query = "SELECT * FROM users WHERE username = ?"
    print(f"Executing query: {query} with parameter: {username}")
    cursor.execute(query, (username,))
    result = cursor.fetchall()
    conn.close()
    return result

if __name__ == "__main__":
    # Create a dummy database for demonstration
    conn = sqlite3.connect('example.db')
    cursor = conn.cursor()
    cursor.execute('''CREATE TABLE IF NOT EXISTS users (id INTEGER PRIMARY KEY, username TEXT, password TEXT)''')
    cursor.execute("INSERT OR IGNORE INTO users (username, password) VALUES ('admin', 'password123')")
    cursor.execute("INSERT OR IGNORE INTO users (username, password) VALUES ('user', 'pass')")
    conn.commit()
    conn.close()

    print("--- SQL Injection Examples ---")

    # Test vulnerable function
    print("\nVulnerable function output for 'admin':")
    print(get_user_data_vulnerable("admin")) # Normal use

    print("\nVulnerable function output for 'admin' OR '1'='1':")
    # Attacker input
    print(get_user_data_vulnerable("admin' OR '1'='1")) # Injects malicious logic

    # Test secure function
    print("\nSecure function output for 'admin':")
    print(get_user_data_secure("admin"))

    print("\nSecure function output for 'admin' OR '1'='1':")
    print(get_user_data_secure("admin' OR '1'='1")) # Treated as a literal string

    os.remove('example.db') # Clean up dummy db