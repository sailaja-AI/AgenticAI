// Vulnerable Java Example - Basic XSS (simulated in print output)
public class XSSExample {

    public static String renderPageVulnerable(String userInput) {
        // DANGEROUS: Directly embedding user input into HTML-like output
        String htmlOutput = "<h1>Welcome, " + userInput + "!</h1>";
        return htmlOutput;
    }

    public static String renderPageSecure(String userInput) {
        // SECURE: Escape special HTML characters
        // In real applications, use a dedicated HTML escaping library like Apache Commons Text HtmlEscapers
        String escapedInput = userInput
            .replace("&", "&amp;")
            .replace("<", "&lt;")
            .replace(">", "&gt;")
            .replace("\"", "&quot;")
            .replace("'", "&#x27;");
        String htmlOutput = "<h1>Welcome, " + escapedInput + "!</h1>";
        return htmlOutput;
    }

    public static void main(String[] args) {
        System.out.println("--- XSS Examples ---");

        // Test vulnerable function
        System.out.println("\nVulnerable HTML output for 'User':");
        System.out.println(renderPageVulnerable("User"));

        System.out.println("\nVulnerable HTML output for '<script>alert(1)</script>':");
        // Attacker input
        System.out.println(renderPageVulnerable("<script>alert('XSS Attack!');</script>"));

        // Test secure function
        System.out.println("\nSecure HTML output for 'User':");
        System.out.println(renderPageSecure("User"));

        System.out.println("\nSecure HTML output for '<script>alert(1)</script>':");
        System.out.println(renderPageSecure("<script>alert('XSS Attack!');</script>"));
    }
}