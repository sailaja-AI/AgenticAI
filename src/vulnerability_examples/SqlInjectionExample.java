// Vulnerable Java Example - SQL Injection
import java.sql.*;

public class SqlInjectionExample {

    // DANGEROUS: Direct string concatenation for SQL query
    public static void getUserDataVulnerable(String username) {
        String url = "jdbc:sqlite:example.db";
        try (Connection conn = DriverManager.getConnection(url);
             Statement stmt = conn.createStatement()) {

            String sql = "SELECT * FROM users WHERE username = '" + username + "'";
            System.out.println("Executing vulnerable query: " + sql);
            ResultSet rs = stmt.executeQuery(sql);
            while (rs.next()) {
                System.out.println("User ID: " + rs.getInt("id") + ", Username: " + rs.getString("username"));
            }
        } catch (SQLException e) {
            System.err.println("SQL Error (vulnerable): " + e.getMessage());
        }
    }

    // SECURE: Using PreparedStatement with parameterized queries
    public static void getUserDataSecure(String username) {
        String url = "jdbc:sqlite:example.db";
        try (Connection conn = DriverManager.getConnection(url);
             PreparedStatement pstmt = conn.prepareStatement("SELECT * FROM users WHERE username = ?")) {

            pstmt.setString(1, username);
            System.out.println("Executing secure query with parameter: " + username);
            ResultSet rs = pstmt.executeQuery();
            while (rs.next()) {
                System.out.println("User ID: " + rs.getInt("id") + ", Username: " + rs.getString("username"));
            }
        } catch (SQLException e) {
            System.err.println("SQL Error (secure): " + e.getMessage());
        }
    }

    public static void main(String[] args) {
        // Setup dummy database
        try {
            Class.forName("org.sqlite.JDBC"); // Load SQLite driver
            String url = "jdbc:sqlite:example.db";
            try (Connection conn = DriverManager.getConnection(url);
                 Statement stmt = conn.createStatement()) {
                stmt.execute("DROP TABLE IF EXISTS users");
                stmt.execute("CREATE TABLE users (id INTEGER PRIMARY KEY, username TEXT, password TEXT)");
                stmt.execute("INSERT INTO users (username, password) VALUES ('admin', 'password123')");
                stmt.execute("INSERT INTO users (username, password) VALUES ('user', 'pass')");
            }
        } catch (ClassNotFoundException | SQLException e) {
            System.err.println("Database setup error: " + e.getMessage());
            return;
        }

        System.out.println("--- SQL Injection Examples ---");

        // Test vulnerable function
        System.out.println("\nVulnerable function output for 'admin':");
        getUserDataVulnerable("admin");

        System.out.println("\nVulnerable function output for 'admin' OR '1'='1':");
        // Attacker input
        getUserDataVulnerable("admin' OR '1'='1");

        // Test secure function
        System.out.println("\nSecure function output for 'admin':");
        getUserDataSecure("admin");

        System.out.println("\nSecure function output for 'admin' OR '1'='1':");
        getUserDataSecure("admin' OR '1'='1"); // Treated as a literal string
    }
}